name: EAS Build

on:
  push:
    branches:
      - main
      - development
      - 'feature/**'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  determine-release-type:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.read-version.outputs.release-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Read version from package.json
        id: read-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Release version: $VERSION"
          echo "release-version=$VERSION" >> $GITHUB_OUTPUT

  eas-build:
    needs: determine-release-type
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: yarn

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EAS_TOKEN }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Determine build profile
        id: profile
        run: |
          VERSION=${{ needs.determine-release-type.outputs.release-version }}
          echo "App version: $VERSION"

          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            if [[ "$VERSION" =~ ^[0-9]+\.0\.0$ || "$VERSION" =~ ^[0-9]+\.[0-9]+\.0$ ]]; then
              echo "EAS_BUILD_PROFILE=production" >> $GITHUB_ENV
              echo "RUN_BUILD=true" >> $GITHUB_ENV
            else
              echo "RUN_BUILD=false" >> $GITHUB_ENV
            fi
          elif [[ "${{ github.ref }}" == 'refs/heads/development' ]]; then
            echo "EAS_BUILD_PROFILE=testing" >> $GITHUB_ENV
            echo "RUN_BUILD=true" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == 'pull_request' ]]; then
            echo "EAS_BUILD_PROFILE=testing" >> $GITHUB_ENV
            echo "RUN_BUILD=true" >> $GITHUB_ENV
          else
            echo "EAS_BUILD_PROFILE=development" >> $GITHUB_ENV
            echo "RUN_BUILD=true" >> $GITHUB_ENV
          fi

      - name: Run EAS Build or OTA Publish
        run: |
          if [ "$RUN_BUILD" = "true" ]; then
            echo "Triggering EAS build with profile: $EAS_BUILD_PROFILE"
            eas build --platform all --profile "$EAS_BUILD_PROFILE" --non-interactive
          else
            echo "Triggering OTA update to 'production' channel"
            COMMIT_MESSAGE=$(git log -1 --pretty=%B | head -n 1)
            eas update --channel production --message "${COMMIT_MESSAGE}" --non-interactive
          fi

      - name: Install QR code generator
        if: env.RUN_BUILD == 'true'
        run: npm install -g qrcode-cli@1.0.0

      - name: Fetch Build URLs & Generate QR Codes
        if: env.RUN_BUILD == 'true'
        id: build-meta
        run: |
          mkdir -p qrcodes

          BUILD_JSON=$(eas build:list --status finished --limit 5 --json)
          echo "$BUILD_JSON" > builds.json

          ANDROID_URL=$(jq -r '.[] | select(.platform=="android") | .artifacts.buildUrl' builds.json | head -n 1)
          IOS_URL=$(jq -r '.[] | select(.platform=="ios") | .artifacts.buildUrl' builds.json | head -n 1)

          echo "ANDROID_URL=$ANDROID_URL" >> $GITHUB_ENV
          echo "IOS_URL=$IOS_URL" >> $GITHUB_ENV

          echo "$ANDROID_URL" | qrcode -o qrcodes/android.png
          echo "$IOS_URL" | qrcode -o qrcodes/ios.png

      - name: Upload QR codes to Slack
        if: env.RUN_BUILD == 'true'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: 'gather-dev'
          payload: |
            {
              "text": "*New Gather Build Complete*",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Build Profile:* ${{ env.EAS_BUILD_PROFILE }}\n*Commit:* ${{ github.event.head_commit.message }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Android Build:* ${{ env.ANDROID_URL }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*iOS Build:* ${{ env.IOS_URL }}"
                  }
                }
              ]
            }
          files: |
            qrcodes/android.png
            qrcodes/ios.png
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
